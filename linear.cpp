#include <LiquidCrystal.h>
#include "linear.h"
#include "sensing.h"

//Macros
#define BLANK(num) ({unsigned int i;for(i=0; i<num; i++){lcd->print(" ");}})

//Globals
LiquidCrystal *lcd;
boolean locked=false;
Stats stats;

//Private prototypes
//differently from vanilla Arduino projects, those are needed, as the makefile
//used does not auto-generate the prototypes (thank god)
//also, the setup() and loop() functions *does not* need to be prototyped
void pinSetup();
void lcdSetup();
boolean statsOk(Stats stats);
void readSensors(Stats *stats);
void updateReadings(Stats *stats);
void bias(boolean run);
void warning(boolean run);

//LCD messages and positions, considering 20x4 screen
#define TX_MSG  "TX" //Transmitting icon
#define TX_POSX 0
#define TX_POSY 0
#define WARNING_MSG "WARNING" //Harmful stats warning
#define WARNING_POSX  0  
#define WARNING_POSY  3
#define LOCKED_MSG "LOCKED" //Locked status
#define LOCKED_POSX 13
#define LOCKED_POSY 3

//Main functions 
//main() is auto-generated by the makefile and calls main() once and loop()
//repeteadly, just as vanilla Arduino projects
void setup() {
  pinSetup();
  lcdSetup();
}

void loop() {
  readSensors(&stats); 
  if(statsOk(&stats)){
    warning(false);
    if(!locked && digitalRead(YTX_PIN))
      bias(true);
    else
      bias(false);
  }else{
    warning(true);  
    locked=true;
  }
  
  lcd->setCursor(LOCKED_POSX, LOCKED_POSY);
  if(locked)
    lcd->print(LOCKED_MSG);
  else
    BLANK(sizeof(LOCKED_MSG));  
  
  updateReadings(&stats);
}

void pinSetup(){    
  pinMode(RELAY80_PIN, OUTPUT);
  pinMode(RELAY40_PIN, OUTPUT);
  pinMode(RELAY20_PIN, OUTPUT);
  pinMode(RELAY10_PIN, OUTPUT);
  pinMode(BIAS_PIN, OUTPUT);  
  pinMode(BANDSW_PIN, INPUT_PULLUP);
  pinMode(REARM_PIN, INPUT_PULLUP);
  pinMode(YD0_PIN, INPUT);
  pinMode(YD1_PIN, INPUT);
  pinMode(YD2_PIN, INPUT);
  pinMode(YD3_PIN, INPUT);
}

void lcdSetup(){
  lcd = new LiquidCrystal(LCDR_PIN, LCDE_PIN, LCD4_PIN, LCD5_PIN, LCD6_PIN, LCD7_PIN);
  lcd->begin(20, 4); //AGM-2004D-201 has 20 rows and 4 lines
  lcd->setCursor(0, 0);
  lcd->print("Initial data");
}

void bias(boolean run){
  if(run){
    digitalWrite(BIAS_PIN, HIGH); 
    lcd->setCursor(TX_POSX, TX_POSY);           
    lcd->print(TX_MSG);
  }else{
    digitalWrite(BIAS_PIN, LOW);
    lcd->setCursor(TX_POSX, TX_POSY);            
    BLANK(sizeof(TX_MSG));
  }
}

void warning(boolean run){
  if(run){
    bias(false);
    lcd->setCursor(WARNING_POSX, WARNING_POSY);
    lcd->print(WARNING_MSG);
  }else{
    lcd->setCursor(WARNING_POSX, WARNING_POSY);
    BLANK(sizeof(WARNING_MSG));
  }
}

